package ylog

import (
	"strings"
	"time"
)

// These flags define which text to prefix to each log entry generated by the Logger.
// Bits are or'ed together to control what's printed.
// There is no control over the order they appear (the order listed
// here) or the format they present (as described in the comments).
// For example, flags Ldate | Ltime produce,
//	20090123 01:23:23|message
// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
//	20090123 01:23:23.123123|/a/b/c/d.go:23|message
const (
	Ldate         = 1 << iota // the date in the local time zone: 20090123
	Ltime                     // the time in the local time zone: 01:23:23
	Lmicroseconds             // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                 // full file name and line number: /a/b/c/d.go:23
	Lshortfile                // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                      // if Ldate or Ltime is set, use UTC rather than the local time zone
	Lfuncname                 // the name of function outputs log
	Lloglevel                 // the log level name TODO
	LallFlags     = (1 << iota) - 1

	LdefaultFlags = Ldate | Ltime | Lmicroseconds | Lshortfile | Lloglevel
)

// Cheap integer to fixed-width decimal ASCII. Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

// formatHeader writers log header to buf in following order:
//   * date and/or time (if corresponding flags are provided),
//   * file and line number (if corresponding flags are provided),
//   * function name (if corresponding flags are provided),
//   * log level (if corresponding flags are provided).
func formatHeader(buf *[]byte, flag int, t time.Time, file string, line int, fn string) {
	// set date and time
	if flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if flag&LUTC != 0 {
			t = t.UTC()
		}
		if flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			itoa(buf, int(month), 2)
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
		}
		*buf = append(*buf, '|')
	}
	// set file and line number
	if flag&(Llongfile|Lshortfile) != 0 {
		if flag&Lshortfile != 0 {
			offset := strings.LastIndexByte(file, '/')
			file = file[offset+1:]
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, '|')
	}
	// set function name
	if flag&Lfuncname != 0 {
		*buf = append(*buf, fn...)
		*buf = append(*buf, '|')
	}
}
